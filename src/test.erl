%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.1.1
-module(test).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("test.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type msg2() :: #msg2{}.
-type msg5() :: #msg5{}.
-type msg4() :: #msg4{}.
-type msg1() :: #msg1{}.
-type m_login_toc() :: #m_login_toc{}.
-type m_login_tos() :: #m_login_tos{}.
-type msg() :: #msg{}.
-type msg3() :: #msg3{}.
-export_type(['msg2'/0, 'msg5'/0, 'msg4'/0, 'msg1'/0, 'm_login_toc'/0, 'm_login_tos'/0, 'msg'/0, 'msg3'/0]).

-spec encode_msg(#msg2{} | #msg5{} | #msg4{} | #msg1{} | #m_login_toc{} | #m_login_tos{} | #msg{} | #msg3{}) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(#msg2{} | #msg5{} | #msg4{} | #msg1{} | #m_login_toc{} | #m_login_tos{} | #msg{} | #msg3{}, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #msg2{} -> e_msg_msg2(Msg, TrUserData);
      #msg5{} -> e_msg_msg5(Msg, TrUserData);
      #msg4{} -> e_msg_msg4(Msg, TrUserData);
      #msg1{} -> e_msg_msg1(Msg, TrUserData);
      #m_login_toc{} -> e_msg_m_login_toc(Msg, TrUserData);
      #m_login_tos{} -> e_msg_m_login_tos(Msg, TrUserData);
      #msg{} -> e_msg_msg(Msg, TrUserData);
      #msg3{} -> e_msg_msg3(Msg, TrUserData)
    end.



e_msg_msg2(Msg, TrUserData) ->
    e_msg_msg2(Msg, <<>>, TrUserData).


e_msg_msg2(#msg2{list = F1, int = F2, opt = F3}, Bin,
	   TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true -> e_field_msg2_list(TrF1, Bin, TrUserData)
	   end
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_varint(TrF2, <<B1/binary, 16>>)
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_varint(TrF3, <<B2/binary, 24>>)
	   end
    end.

e_msg_msg5(Msg, TrUserData) ->
    e_msg_msg5(Msg, <<>>, TrUserData).


e_msg_msg5(#msg5{list = F1, int = F2, opt = F3}, Bin,
	   TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true -> e_field_msg5_list(TrF1, Bin, TrUserData)
	   end
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_varint(TrF2, <<B1/binary, 16>>)
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_varint(TrF3, <<B2/binary, 24>>)
	   end
    end.

e_msg_msg4(Msg, TrUserData) ->
    e_msg_msg4(Msg, <<>>, TrUserData).


e_msg_msg4(#msg4{list = F1, int = F2, opt = F3}, Bin,
	   TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true -> e_field_msg4_list(TrF1, Bin, TrUserData)
	   end
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_varint(TrF2, <<B1/binary, 16>>)
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_varint(TrF3, <<B2/binary, 24>>)
	   end
    end.

e_msg_msg1(Msg, TrUserData) ->
    e_msg_msg1(Msg, <<>>, TrUserData).


e_msg_msg1(#msg1{list = F1, int = F2, opt = F3}, Bin,
	   TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true -> e_field_msg1_list(TrF1, Bin, TrUserData)
	   end
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_varint(TrF2, <<B1/binary, 16>>)
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_varint(TrF3, <<B2/binary, 24>>)
	   end
    end.

e_msg_m_login_toc(Msg, TrUserData) ->
    e_msg_m_login_toc(Msg, <<>>, TrUserData).


e_msg_m_login_toc(#m_login_toc{id = F1, name = F2}, Bin,
		  TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_string(TrF2, <<B1/binary, 18>>)
    end.

e_msg_m_login_tos(Msg, TrUserData) ->
    e_msg_m_login_tos(Msg, <<>>, TrUserData).


e_msg_m_login_tos(#m_login_tos{id = F1}, Bin,
		  TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_varint(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_msg(Msg, TrUserData) ->
    e_msg_msg(Msg, <<>>, TrUserData).


e_msg_msg(#msg{list = F1, int = F2, opt = F3}, Bin,
	  TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true -> e_field_msg_list(TrF1, Bin, TrUserData)
	   end
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_varint(TrF2, <<B1/binary, 16>>)
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_varint(TrF3, <<B2/binary, 24>>)
	   end
    end.

e_msg_msg3(Msg, TrUserData) ->
    e_msg_msg3(Msg, <<>>, TrUserData).


e_msg_msg3(#msg3{list = F1, int = F2, opt = F3}, Bin,
	   TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true -> e_field_msg3_list(TrF1, Bin, TrUserData)
	   end
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_varint(TrF2, <<B1/binary, 16>>)
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_varint(TrF3, <<B2/binary, 24>>)
	   end
    end.

e_field_msg2_list([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 8>>,
    Bin3 = e_varint(id(Elem, TrUserData), Bin2),
    e_field_msg2_list(Rest, Bin3, TrUserData);
e_field_msg2_list([], Bin, _TrUserData) -> Bin.

e_field_msg5_list([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 8>>,
    Bin3 = e_varint(id(Elem, TrUserData), Bin2),
    e_field_msg5_list(Rest, Bin3, TrUserData);
e_field_msg5_list([], Bin, _TrUserData) -> Bin.

e_field_msg4_list([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 8>>,
    Bin3 = e_varint(id(Elem, TrUserData), Bin2),
    e_field_msg4_list(Rest, Bin3, TrUserData);
e_field_msg4_list([], Bin, _TrUserData) -> Bin.

e_field_msg1_list([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 8>>,
    Bin3 = e_varint(id(Elem, TrUserData), Bin2),
    e_field_msg1_list(Rest, Bin3, TrUserData);
e_field_msg1_list([], Bin, _TrUserData) -> Bin.

e_field_msg_list([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 8>>,
    Bin3 = e_varint(id(Elem, TrUserData), Bin2),
    e_field_msg_list(Rest, Bin3, TrUserData);
e_field_msg_list([], Bin, _TrUserData) -> Bin.

e_field_msg3_list([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 8>>,
    Bin3 = e_varint(id(Elem, TrUserData), Bin2),
    e_field_msg3_list(Rest, Bin3, TrUserData);
e_field_msg3_list([], Bin, _TrUserData) -> Bin.

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      msg2 ->
	  try d_msg_msg2(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, msg2, {Class, Reason, StackTrace}}}})
	  end;
      msg5 ->
	  try d_msg_msg5(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, msg5, {Class, Reason, StackTrace}}}})
	  end;
      msg4 ->
	  try d_msg_msg4(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, msg4, {Class, Reason, StackTrace}}}})
	  end;
      msg1 ->
	  try d_msg_msg1(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, msg1, {Class, Reason, StackTrace}}}})
	  end;
      m_login_toc ->
	  try d_msg_m_login_toc(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, m_login_toc, {Class, Reason, StackTrace}}}})
	  end;
      m_login_tos ->
	  try d_msg_m_login_tos(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, m_login_tos, {Class, Reason, StackTrace}}}})
	  end;
      msg ->
	  try d_msg_msg(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, msg, {Class, Reason, StackTrace}}}})
	  end;
      msg3 ->
	  try d_msg_msg3(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, msg3, {Class, Reason, StackTrace}}}})
	  end
    end.



d_msg_msg2(Bin, TrUserData) ->
    dfp_read_field_def_msg2(Bin, 0, 0, id([], TrUserData),
			    id(undefined, TrUserData),
			    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_msg2(<<10, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, TrUserData) ->
    d_pfield_msg2_list(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		       TrUserData);
dfp_read_field_def_msg2(<<8, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, TrUserData) ->
    d_field_msg2_list(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		      TrUserData);
dfp_read_field_def_msg2(<<16, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, TrUserData) ->
    d_field_msg2_int(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		     TrUserData);
dfp_read_field_def_msg2(<<24, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, TrUserData) ->
    d_field_msg2_opt(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		     TrUserData);
dfp_read_field_def_msg2(<<>>, 0, 0, R1, F@_2, F@_3,
			TrUserData) ->
    #msg2{list = lists_reverse(R1, TrUserData), int = F@_2,
	  opt = F@_3};
dfp_read_field_def_msg2(Other, Z1, Z2, F@_1, F@_2, F@_3,
			TrUserData) ->
    dg_read_field_def_msg2(Other, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData).

dg_read_field_def_msg2(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_msg2(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, TrUserData);
dg_read_field_def_msg2(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_pfield_msg2_list(Rest, 0, 0, F@_1, F@_2, F@_3,
			     TrUserData);
      8 ->
	  d_field_msg2_list(Rest, 0, 0, F@_1, F@_2, F@_3,
			    TrUserData);
      16 ->
	  d_field_msg2_int(Rest, 0, 0, F@_1, F@_2, F@_3,
			   TrUserData);
      24 ->
	  d_field_msg2_opt(Rest, 0, 0, F@_1, F@_2, F@_3,
			   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_msg2(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
	    1 ->
		skip_64_msg2(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
	    2 ->
		skip_length_delimited_msg2(Rest, 0, 0, F@_1, F@_2, F@_3,
					   TrUserData);
	    3 ->
		skip_group_msg2(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				TrUserData);
	    5 ->
		skip_32_msg2(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
	  end
    end;
dg_read_field_def_msg2(<<>>, 0, 0, R1, F@_2, F@_3,
		       TrUserData) ->
    #msg2{list = lists_reverse(R1, TrUserData), int = F@_2,
	  opt = F@_3}.

d_field_msg2_list(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_msg2_list(Rest, N + 7, X bsl N + Acc, F@_1,
		      F@_2, F@_3, TrUserData);
d_field_msg2_list(<<0:1, X:7, Rest/binary>>, N, Acc,
		  Prev, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_msg2(RestF, 0, 0,
			    cons(NewFValue, Prev, TrUserData), F@_2, F@_3,
			    TrUserData).

d_pfield_msg2_list(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_pfield_msg2_list(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, TrUserData);
d_pfield_msg2_list(<<0:1, X:7, Rest/binary>>, N, Acc, E,
		   F@_2, F@_3, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_msg2_list(PackedBytes, 0, 0, E),
    dfp_read_field_def_msg2(Rest2, 0, 0, NewSeq, F@_2, F@_3,
			    TrUserData).

d_packed_field_msg2_list(<<1:1, X:7, Rest/binary>>, N,
			 Acc, AccSeq)
    when N < 57 ->
    d_packed_field_msg2_list(Rest, N + 7, X bsl N + Acc,
			     AccSeq);
d_packed_field_msg2_list(<<0:1, X:7, Rest/binary>>, N,
			 Acc, AccSeq) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    d_packed_field_msg2_list(RestF, 0, 0,
			     [NewFValue | AccSeq]);
d_packed_field_msg2_list(<<>>, 0, 0, AccSeq) -> AccSeq.

d_field_msg2_int(<<1:1, X:7, Rest/binary>>, N, Acc,
		 F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_msg2_int(Rest, N + 7, X bsl N + Acc, F@_1, F@_2,
		     F@_3, TrUserData);
d_field_msg2_int(<<0:1, X:7, Rest/binary>>, N, Acc,
		 F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_msg2(RestF, 0, 0, F@_1, NewFValue,
			    F@_3, TrUserData).

d_field_msg2_opt(<<1:1, X:7, Rest/binary>>, N, Acc,
		 F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_msg2_opt(Rest, N + 7, X bsl N + Acc, F@_1, F@_2,
		     F@_3, TrUserData);
d_field_msg2_opt(<<0:1, X:7, Rest/binary>>, N, Acc,
		 F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_msg2(RestF, 0, 0, F@_1, F@_2,
			    NewFValue, TrUserData).

skip_varint_msg2(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_msg2(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		     TrUserData);
skip_varint_msg2(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_msg2(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData).

skip_length_delimited_msg2(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_msg2(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_msg2(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_msg2(Rest2, 0, 0, F@_1, F@_2, F@_3,
			    TrUserData).

skip_group_msg2(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_msg2(Rest, 0, Z2, F@_1, F@_2, F@_3,
			    TrUserData).

skip_32_msg2(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	     F@_3, TrUserData) ->
    dfp_read_field_def_msg2(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData).

skip_64_msg2(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	     F@_3, TrUserData) ->
    dfp_read_field_def_msg2(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData).

d_msg_msg5(Bin, TrUserData) ->
    dfp_read_field_def_msg5(Bin, 0, 0, id([], TrUserData),
			    id(undefined, TrUserData),
			    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_msg5(<<10, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, TrUserData) ->
    d_pfield_msg5_list(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		       TrUserData);
dfp_read_field_def_msg5(<<8, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, TrUserData) ->
    d_field_msg5_list(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		      TrUserData);
dfp_read_field_def_msg5(<<16, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, TrUserData) ->
    d_field_msg5_int(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		     TrUserData);
dfp_read_field_def_msg5(<<24, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, TrUserData) ->
    d_field_msg5_opt(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		     TrUserData);
dfp_read_field_def_msg5(<<>>, 0, 0, R1, F@_2, F@_3,
			TrUserData) ->
    #msg5{list = lists_reverse(R1, TrUserData), int = F@_2,
	  opt = F@_3};
dfp_read_field_def_msg5(Other, Z1, Z2, F@_1, F@_2, F@_3,
			TrUserData) ->
    dg_read_field_def_msg5(Other, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData).

dg_read_field_def_msg5(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_msg5(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, TrUserData);
dg_read_field_def_msg5(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_pfield_msg5_list(Rest, 0, 0, F@_1, F@_2, F@_3,
			     TrUserData);
      8 ->
	  d_field_msg5_list(Rest, 0, 0, F@_1, F@_2, F@_3,
			    TrUserData);
      16 ->
	  d_field_msg5_int(Rest, 0, 0, F@_1, F@_2, F@_3,
			   TrUserData);
      24 ->
	  d_field_msg5_opt(Rest, 0, 0, F@_1, F@_2, F@_3,
			   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_msg5(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
	    1 ->
		skip_64_msg5(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
	    2 ->
		skip_length_delimited_msg5(Rest, 0, 0, F@_1, F@_2, F@_3,
					   TrUserData);
	    3 ->
		skip_group_msg5(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				TrUserData);
	    5 ->
		skip_32_msg5(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
	  end
    end;
dg_read_field_def_msg5(<<>>, 0, 0, R1, F@_2, F@_3,
		       TrUserData) ->
    #msg5{list = lists_reverse(R1, TrUserData), int = F@_2,
	  opt = F@_3}.

d_field_msg5_list(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_msg5_list(Rest, N + 7, X bsl N + Acc, F@_1,
		      F@_2, F@_3, TrUserData);
d_field_msg5_list(<<0:1, X:7, Rest/binary>>, N, Acc,
		  Prev, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_msg5(RestF, 0, 0,
			    cons(NewFValue, Prev, TrUserData), F@_2, F@_3,
			    TrUserData).

d_pfield_msg5_list(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_pfield_msg5_list(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, TrUserData);
d_pfield_msg5_list(<<0:1, X:7, Rest/binary>>, N, Acc, E,
		   F@_2, F@_3, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_msg5_list(PackedBytes, 0, 0, E),
    dfp_read_field_def_msg5(Rest2, 0, 0, NewSeq, F@_2, F@_3,
			    TrUserData).

d_packed_field_msg5_list(<<1:1, X:7, Rest/binary>>, N,
			 Acc, AccSeq)
    when N < 57 ->
    d_packed_field_msg5_list(Rest, N + 7, X bsl N + Acc,
			     AccSeq);
d_packed_field_msg5_list(<<0:1, X:7, Rest/binary>>, N,
			 Acc, AccSeq) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    d_packed_field_msg5_list(RestF, 0, 0,
			     [NewFValue | AccSeq]);
d_packed_field_msg5_list(<<>>, 0, 0, AccSeq) -> AccSeq.

d_field_msg5_int(<<1:1, X:7, Rest/binary>>, N, Acc,
		 F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_msg5_int(Rest, N + 7, X bsl N + Acc, F@_1, F@_2,
		     F@_3, TrUserData);
d_field_msg5_int(<<0:1, X:7, Rest/binary>>, N, Acc,
		 F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_msg5(RestF, 0, 0, F@_1, NewFValue,
			    F@_3, TrUserData).

d_field_msg5_opt(<<1:1, X:7, Rest/binary>>, N, Acc,
		 F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_msg5_opt(Rest, N + 7, X bsl N + Acc, F@_1, F@_2,
		     F@_3, TrUserData);
d_field_msg5_opt(<<0:1, X:7, Rest/binary>>, N, Acc,
		 F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_msg5(RestF, 0, 0, F@_1, F@_2,
			    NewFValue, TrUserData).

skip_varint_msg5(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_msg5(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		     TrUserData);
skip_varint_msg5(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_msg5(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData).

skip_length_delimited_msg5(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_msg5(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_msg5(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_msg5(Rest2, 0, 0, F@_1, F@_2, F@_3,
			    TrUserData).

skip_group_msg5(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_msg5(Rest, 0, Z2, F@_1, F@_2, F@_3,
			    TrUserData).

skip_32_msg5(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	     F@_3, TrUserData) ->
    dfp_read_field_def_msg5(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData).

skip_64_msg5(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	     F@_3, TrUserData) ->
    dfp_read_field_def_msg5(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData).

d_msg_msg4(Bin, TrUserData) ->
    dfp_read_field_def_msg4(Bin, 0, 0, id([], TrUserData),
			    id(undefined, TrUserData),
			    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_msg4(<<10, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, TrUserData) ->
    d_pfield_msg4_list(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		       TrUserData);
dfp_read_field_def_msg4(<<8, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, TrUserData) ->
    d_field_msg4_list(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		      TrUserData);
dfp_read_field_def_msg4(<<16, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, TrUserData) ->
    d_field_msg4_int(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		     TrUserData);
dfp_read_field_def_msg4(<<24, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, TrUserData) ->
    d_field_msg4_opt(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		     TrUserData);
dfp_read_field_def_msg4(<<>>, 0, 0, R1, F@_2, F@_3,
			TrUserData) ->
    #msg4{list = lists_reverse(R1, TrUserData), int = F@_2,
	  opt = F@_3};
dfp_read_field_def_msg4(Other, Z1, Z2, F@_1, F@_2, F@_3,
			TrUserData) ->
    dg_read_field_def_msg4(Other, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData).

dg_read_field_def_msg4(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_msg4(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, TrUserData);
dg_read_field_def_msg4(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_pfield_msg4_list(Rest, 0, 0, F@_1, F@_2, F@_3,
			     TrUserData);
      8 ->
	  d_field_msg4_list(Rest, 0, 0, F@_1, F@_2, F@_3,
			    TrUserData);
      16 ->
	  d_field_msg4_int(Rest, 0, 0, F@_1, F@_2, F@_3,
			   TrUserData);
      24 ->
	  d_field_msg4_opt(Rest, 0, 0, F@_1, F@_2, F@_3,
			   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_msg4(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
	    1 ->
		skip_64_msg4(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
	    2 ->
		skip_length_delimited_msg4(Rest, 0, 0, F@_1, F@_2, F@_3,
					   TrUserData);
	    3 ->
		skip_group_msg4(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				TrUserData);
	    5 ->
		skip_32_msg4(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
	  end
    end;
dg_read_field_def_msg4(<<>>, 0, 0, R1, F@_2, F@_3,
		       TrUserData) ->
    #msg4{list = lists_reverse(R1, TrUserData), int = F@_2,
	  opt = F@_3}.

d_field_msg4_list(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_msg4_list(Rest, N + 7, X bsl N + Acc, F@_1,
		      F@_2, F@_3, TrUserData);
d_field_msg4_list(<<0:1, X:7, Rest/binary>>, N, Acc,
		  Prev, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_msg4(RestF, 0, 0,
			    cons(NewFValue, Prev, TrUserData), F@_2, F@_3,
			    TrUserData).

d_pfield_msg4_list(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_pfield_msg4_list(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, TrUserData);
d_pfield_msg4_list(<<0:1, X:7, Rest/binary>>, N, Acc, E,
		   F@_2, F@_3, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_msg4_list(PackedBytes, 0, 0, E),
    dfp_read_field_def_msg4(Rest2, 0, 0, NewSeq, F@_2, F@_3,
			    TrUserData).

d_packed_field_msg4_list(<<1:1, X:7, Rest/binary>>, N,
			 Acc, AccSeq)
    when N < 57 ->
    d_packed_field_msg4_list(Rest, N + 7, X bsl N + Acc,
			     AccSeq);
d_packed_field_msg4_list(<<0:1, X:7, Rest/binary>>, N,
			 Acc, AccSeq) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    d_packed_field_msg4_list(RestF, 0, 0,
			     [NewFValue | AccSeq]);
d_packed_field_msg4_list(<<>>, 0, 0, AccSeq) -> AccSeq.

d_field_msg4_int(<<1:1, X:7, Rest/binary>>, N, Acc,
		 F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_msg4_int(Rest, N + 7, X bsl N + Acc, F@_1, F@_2,
		     F@_3, TrUserData);
d_field_msg4_int(<<0:1, X:7, Rest/binary>>, N, Acc,
		 F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_msg4(RestF, 0, 0, F@_1, NewFValue,
			    F@_3, TrUserData).

d_field_msg4_opt(<<1:1, X:7, Rest/binary>>, N, Acc,
		 F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_msg4_opt(Rest, N + 7, X bsl N + Acc, F@_1, F@_2,
		     F@_3, TrUserData);
d_field_msg4_opt(<<0:1, X:7, Rest/binary>>, N, Acc,
		 F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_msg4(RestF, 0, 0, F@_1, F@_2,
			    NewFValue, TrUserData).

skip_varint_msg4(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_msg4(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		     TrUserData);
skip_varint_msg4(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_msg4(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData).

skip_length_delimited_msg4(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_msg4(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_msg4(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_msg4(Rest2, 0, 0, F@_1, F@_2, F@_3,
			    TrUserData).

skip_group_msg4(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_msg4(Rest, 0, Z2, F@_1, F@_2, F@_3,
			    TrUserData).

skip_32_msg4(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	     F@_3, TrUserData) ->
    dfp_read_field_def_msg4(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData).

skip_64_msg4(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	     F@_3, TrUserData) ->
    dfp_read_field_def_msg4(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData).

d_msg_msg1(Bin, TrUserData) ->
    dfp_read_field_def_msg1(Bin, 0, 0, id([], TrUserData),
			    id(undefined, TrUserData),
			    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_msg1(<<10, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, TrUserData) ->
    d_pfield_msg1_list(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		       TrUserData);
dfp_read_field_def_msg1(<<8, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, TrUserData) ->
    d_field_msg1_list(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		      TrUserData);
dfp_read_field_def_msg1(<<16, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, TrUserData) ->
    d_field_msg1_int(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		     TrUserData);
dfp_read_field_def_msg1(<<24, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, TrUserData) ->
    d_field_msg1_opt(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		     TrUserData);
dfp_read_field_def_msg1(<<>>, 0, 0, R1, F@_2, F@_3,
			TrUserData) ->
    #msg1{list = lists_reverse(R1, TrUserData), int = F@_2,
	  opt = F@_3};
dfp_read_field_def_msg1(Other, Z1, Z2, F@_1, F@_2, F@_3,
			TrUserData) ->
    dg_read_field_def_msg1(Other, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData).

dg_read_field_def_msg1(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_msg1(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, TrUserData);
dg_read_field_def_msg1(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_pfield_msg1_list(Rest, 0, 0, F@_1, F@_2, F@_3,
			     TrUserData);
      8 ->
	  d_field_msg1_list(Rest, 0, 0, F@_1, F@_2, F@_3,
			    TrUserData);
      16 ->
	  d_field_msg1_int(Rest, 0, 0, F@_1, F@_2, F@_3,
			   TrUserData);
      24 ->
	  d_field_msg1_opt(Rest, 0, 0, F@_1, F@_2, F@_3,
			   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_msg1(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
	    1 ->
		skip_64_msg1(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
	    2 ->
		skip_length_delimited_msg1(Rest, 0, 0, F@_1, F@_2, F@_3,
					   TrUserData);
	    3 ->
		skip_group_msg1(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				TrUserData);
	    5 ->
		skip_32_msg1(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
	  end
    end;
dg_read_field_def_msg1(<<>>, 0, 0, R1, F@_2, F@_3,
		       TrUserData) ->
    #msg1{list = lists_reverse(R1, TrUserData), int = F@_2,
	  opt = F@_3}.

d_field_msg1_list(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_msg1_list(Rest, N + 7, X bsl N + Acc, F@_1,
		      F@_2, F@_3, TrUserData);
d_field_msg1_list(<<0:1, X:7, Rest/binary>>, N, Acc,
		  Prev, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_msg1(RestF, 0, 0,
			    cons(NewFValue, Prev, TrUserData), F@_2, F@_3,
			    TrUserData).

d_pfield_msg1_list(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_pfield_msg1_list(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, TrUserData);
d_pfield_msg1_list(<<0:1, X:7, Rest/binary>>, N, Acc, E,
		   F@_2, F@_3, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_msg1_list(PackedBytes, 0, 0, E),
    dfp_read_field_def_msg1(Rest2, 0, 0, NewSeq, F@_2, F@_3,
			    TrUserData).

d_packed_field_msg1_list(<<1:1, X:7, Rest/binary>>, N,
			 Acc, AccSeq)
    when N < 57 ->
    d_packed_field_msg1_list(Rest, N + 7, X bsl N + Acc,
			     AccSeq);
d_packed_field_msg1_list(<<0:1, X:7, Rest/binary>>, N,
			 Acc, AccSeq) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    d_packed_field_msg1_list(RestF, 0, 0,
			     [NewFValue | AccSeq]);
d_packed_field_msg1_list(<<>>, 0, 0, AccSeq) -> AccSeq.

d_field_msg1_int(<<1:1, X:7, Rest/binary>>, N, Acc,
		 F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_msg1_int(Rest, N + 7, X bsl N + Acc, F@_1, F@_2,
		     F@_3, TrUserData);
d_field_msg1_int(<<0:1, X:7, Rest/binary>>, N, Acc,
		 F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_msg1(RestF, 0, 0, F@_1, NewFValue,
			    F@_3, TrUserData).

d_field_msg1_opt(<<1:1, X:7, Rest/binary>>, N, Acc,
		 F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_msg1_opt(Rest, N + 7, X bsl N + Acc, F@_1, F@_2,
		     F@_3, TrUserData);
d_field_msg1_opt(<<0:1, X:7, Rest/binary>>, N, Acc,
		 F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_msg1(RestF, 0, 0, F@_1, F@_2,
			    NewFValue, TrUserData).

skip_varint_msg1(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_msg1(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		     TrUserData);
skip_varint_msg1(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_msg1(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData).

skip_length_delimited_msg1(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_msg1(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_msg1(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_msg1(Rest2, 0, 0, F@_1, F@_2, F@_3,
			    TrUserData).

skip_group_msg1(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_msg1(Rest, 0, Z2, F@_1, F@_2, F@_3,
			    TrUserData).

skip_32_msg1(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	     F@_3, TrUserData) ->
    dfp_read_field_def_msg1(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData).

skip_64_msg1(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	     F@_3, TrUserData) ->
    dfp_read_field_def_msg1(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData).

d_msg_m_login_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_login_toc(Bin, 0, 0,
				   id(undefined, TrUserData),
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_m_login_toc(<<8, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_login_toc_id(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData);
dfp_read_field_def_m_login_toc(<<18, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_login_toc_name(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
dfp_read_field_def_m_login_toc(<<>>, 0, 0, F@_1, F@_2,
			       _) ->
    #m_login_toc{id = F@_1, name = F@_2};
dfp_read_field_def_m_login_toc(Other, Z1, Z2, F@_1,
			       F@_2, TrUserData) ->
    dg_read_field_def_m_login_toc(Other, Z1, Z2, F@_1, F@_2,
				  TrUserData).

dg_read_field_def_m_login_toc(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_login_toc(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_m_login_toc(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_login_toc_id(Rest, 0, 0, F@_1, F@_2,
				 TrUserData);
      18 ->
	  d_field_m_login_toc_name(Rest, 0, 0, F@_1, F@_2,
				   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_login_toc(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
	    1 ->
		skip_64_m_login_toc(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_m_login_toc(Rest, 0, 0, F@_1,
						  F@_2, TrUserData);
	    3 ->
		skip_group_m_login_toc(Rest, Key bsr 3, 0, F@_1, F@_2,
				       TrUserData);
	    5 ->
		skip_32_m_login_toc(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_m_login_toc(<<>>, 0, 0, F@_1, F@_2,
			      _) ->
    #m_login_toc{id = F@_1, name = F@_2}.

d_field_m_login_toc_id(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_login_toc_id(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, TrUserData);
d_field_m_login_toc_id(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_m_login_toc(RestF, 0, 0, NewFValue,
				   F@_2, TrUserData).

d_field_m_login_toc_name(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_login_toc_name(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
d_field_m_login_toc_name(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_m_login_toc(RestF, 0, 0, F@_1,
				   NewFValue, TrUserData).

skip_varint_m_login_toc(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_m_login_toc(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
skip_varint_m_login_toc(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_login_toc(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_length_delimited_m_login_toc(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_login_toc(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_m_login_toc(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_login_toc(Rest2, 0, 0, F@_1, F@_2,
				   TrUserData).

skip_group_m_login_toc(Bin, FNum, Z2, F@_1, F@_2,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_login_toc(Rest, 0, Z2, F@_1, F@_2,
				   TrUserData).

skip_32_m_login_toc(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_m_login_toc(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_64_m_login_toc(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_m_login_toc(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

d_msg_m_login_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_login_tos(Bin, 0, 0,
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_m_login_tos(<<8, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_m_login_tos_id(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_m_login_tos(<<>>, 0, 0, F@_1, _) ->
    #m_login_tos{id = F@_1};
dfp_read_field_def_m_login_tos(Other, Z1, Z2, F@_1,
			       TrUserData) ->
    dg_read_field_def_m_login_tos(Other, Z1, Z2, F@_1,
				  TrUserData).

dg_read_field_def_m_login_tos(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_login_tos(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_login_tos(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_login_tos_id(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_login_tos(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_m_login_tos(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_m_login_tos(Rest, 0, 0, F@_1,
						  TrUserData);
	    3 ->
		skip_group_m_login_tos(Rest, Key bsr 3, 0, F@_1,
				       TrUserData);
	    5 -> skip_32_m_login_tos(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_m_login_tos(<<>>, 0, 0, F@_1, _) ->
    #m_login_tos{id = F@_1}.

d_field_m_login_tos_id(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_login_tos_id(Rest, N + 7, X bsl N + Acc, F@_1,
			   TrUserData);
d_field_m_login_tos_id(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_m_login_tos(RestF, 0, 0, NewFValue,
				   TrUserData).

skip_varint_m_login_tos(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    skip_varint_m_login_tos(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_m_login_tos(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_login_tos(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_length_delimited_m_login_tos(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_login_tos(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_login_tos(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_login_tos(Rest2, 0, 0, F@_1,
				   TrUserData).

skip_group_m_login_tos(Bin, FNum, Z2, F@_1,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_login_tos(Rest, 0, Z2, F@_1,
				   TrUserData).

skip_32_m_login_tos(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_m_login_tos(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_64_m_login_tos(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_m_login_tos(Rest, Z1, Z2, F@_1,
				   TrUserData).

d_msg_msg(Bin, TrUserData) ->
    dfp_read_field_def_msg(Bin, 0, 0, id([], TrUserData),
			   id(undefined, TrUserData), id(undefined, TrUserData),
			   TrUserData).

dfp_read_field_def_msg(<<10, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, TrUserData) ->
    d_pfield_msg_list(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		      TrUserData);
dfp_read_field_def_msg(<<8, Rest/binary>>, Z1, Z2, F@_1,
		       F@_2, F@_3, TrUserData) ->
    d_field_msg_list(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		     TrUserData);
dfp_read_field_def_msg(<<16, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, TrUserData) ->
    d_field_msg_int(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		    TrUserData);
dfp_read_field_def_msg(<<24, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, TrUserData) ->
    d_field_msg_opt(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		    TrUserData);
dfp_read_field_def_msg(<<>>, 0, 0, R1, F@_2, F@_3,
		       TrUserData) ->
    #msg{list = lists_reverse(R1, TrUserData), int = F@_2,
	 opt = F@_3};
dfp_read_field_def_msg(Other, Z1, Z2, F@_1, F@_2, F@_3,
		       TrUserData) ->
    dg_read_field_def_msg(Other, Z1, Z2, F@_1, F@_2, F@_3,
			  TrUserData).

dg_read_field_def_msg(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_msg(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, TrUserData);
dg_read_field_def_msg(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_pfield_msg_list(Rest, 0, 0, F@_1, F@_2, F@_3,
			    TrUserData);
      8 ->
	  d_field_msg_list(Rest, 0, 0, F@_1, F@_2, F@_3,
			   TrUserData);
      16 ->
	  d_field_msg_int(Rest, 0, 0, F@_1, F@_2, F@_3,
			  TrUserData);
      24 ->
	  d_field_msg_opt(Rest, 0, 0, F@_1, F@_2, F@_3,
			  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_msg(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData);
	    1 ->
		skip_64_msg(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
	    2 ->
		skip_length_delimited_msg(Rest, 0, 0, F@_1, F@_2, F@_3,
					  TrUserData);
	    3 ->
		skip_group_msg(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
			       TrUserData);
	    5 ->
		skip_32_msg(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
	  end
    end;
dg_read_field_def_msg(<<>>, 0, 0, R1, F@_2, F@_3,
		      TrUserData) ->
    #msg{list = lists_reverse(R1, TrUserData), int = F@_2,
	 opt = F@_3}.

d_field_msg_list(<<1:1, X:7, Rest/binary>>, N, Acc,
		 F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_msg_list(Rest, N + 7, X bsl N + Acc, F@_1, F@_2,
		     F@_3, TrUserData);
d_field_msg_list(<<0:1, X:7, Rest/binary>>, N, Acc,
		 Prev, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_msg(RestF, 0, 0,
			   cons(NewFValue, Prev, TrUserData), F@_2, F@_3,
			   TrUserData).

d_pfield_msg_list(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_pfield_msg_list(Rest, N + 7, X bsl N + Acc, F@_1,
		      F@_2, F@_3, TrUserData);
d_pfield_msg_list(<<0:1, X:7, Rest/binary>>, N, Acc, E,
		  F@_2, F@_3, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_msg_list(PackedBytes, 0, 0, E),
    dfp_read_field_def_msg(Rest2, 0, 0, NewSeq, F@_2, F@_3,
			   TrUserData).

d_packed_field_msg_list(<<1:1, X:7, Rest/binary>>, N,
			Acc, AccSeq)
    when N < 57 ->
    d_packed_field_msg_list(Rest, N + 7, X bsl N + Acc,
			    AccSeq);
d_packed_field_msg_list(<<0:1, X:7, Rest/binary>>, N,
			Acc, AccSeq) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    d_packed_field_msg_list(RestF, 0, 0,
			    [NewFValue | AccSeq]);
d_packed_field_msg_list(<<>>, 0, 0, AccSeq) -> AccSeq.

d_field_msg_int(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1,
		F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_msg_int(Rest, N + 7, X bsl N + Acc, F@_1, F@_2,
		    F@_3, TrUserData);
d_field_msg_int(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1,
		_, F@_3, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_msg(RestF, 0, 0, F@_1, NewFValue,
			   F@_3, TrUserData).

d_field_msg_opt(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1,
		F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_msg_opt(Rest, N + 7, X bsl N + Acc, F@_1, F@_2,
		    F@_3, TrUserData);
d_field_msg_opt(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1,
		F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_msg(RestF, 0, 0, F@_1, F@_2,
			   NewFValue, TrUserData).

skip_varint_msg(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, TrUserData) ->
    skip_varint_msg(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		    TrUserData);
skip_varint_msg(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_msg(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData).

skip_length_delimited_msg(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_msg(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_msg(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_msg(Rest2, 0, 0, F@_1, F@_2, F@_3,
			   TrUserData).

skip_group_msg(Bin, FNum, Z2, F@_1, F@_2, F@_3,
	       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_msg(Rest, 0, Z2, F@_1, F@_2, F@_3,
			   TrUserData).

skip_32_msg(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	    F@_3, TrUserData) ->
    dfp_read_field_def_msg(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData).

skip_64_msg(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	    F@_3, TrUserData) ->
    dfp_read_field_def_msg(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData).

d_msg_msg3(Bin, TrUserData) ->
    dfp_read_field_def_msg3(Bin, 0, 0, id([], TrUserData),
			    id(undefined, TrUserData),
			    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_msg3(<<10, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, TrUserData) ->
    d_pfield_msg3_list(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		       TrUserData);
dfp_read_field_def_msg3(<<8, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, TrUserData) ->
    d_field_msg3_list(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		      TrUserData);
dfp_read_field_def_msg3(<<16, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, TrUserData) ->
    d_field_msg3_int(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		     TrUserData);
dfp_read_field_def_msg3(<<24, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, TrUserData) ->
    d_field_msg3_opt(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		     TrUserData);
dfp_read_field_def_msg3(<<>>, 0, 0, R1, F@_2, F@_3,
			TrUserData) ->
    #msg3{list = lists_reverse(R1, TrUserData), int = F@_2,
	  opt = F@_3};
dfp_read_field_def_msg3(Other, Z1, Z2, F@_1, F@_2, F@_3,
			TrUserData) ->
    dg_read_field_def_msg3(Other, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData).

dg_read_field_def_msg3(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_msg3(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, TrUserData);
dg_read_field_def_msg3(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_pfield_msg3_list(Rest, 0, 0, F@_1, F@_2, F@_3,
			     TrUserData);
      8 ->
	  d_field_msg3_list(Rest, 0, 0, F@_1, F@_2, F@_3,
			    TrUserData);
      16 ->
	  d_field_msg3_int(Rest, 0, 0, F@_1, F@_2, F@_3,
			   TrUserData);
      24 ->
	  d_field_msg3_opt(Rest, 0, 0, F@_1, F@_2, F@_3,
			   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_msg3(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
	    1 ->
		skip_64_msg3(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
	    2 ->
		skip_length_delimited_msg3(Rest, 0, 0, F@_1, F@_2, F@_3,
					   TrUserData);
	    3 ->
		skip_group_msg3(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				TrUserData);
	    5 ->
		skip_32_msg3(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
	  end
    end;
dg_read_field_def_msg3(<<>>, 0, 0, R1, F@_2, F@_3,
		       TrUserData) ->
    #msg3{list = lists_reverse(R1, TrUserData), int = F@_2,
	  opt = F@_3}.

d_field_msg3_list(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_msg3_list(Rest, N + 7, X bsl N + Acc, F@_1,
		      F@_2, F@_3, TrUserData);
d_field_msg3_list(<<0:1, X:7, Rest/binary>>, N, Acc,
		  Prev, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_msg3(RestF, 0, 0,
			    cons(NewFValue, Prev, TrUserData), F@_2, F@_3,
			    TrUserData).

d_pfield_msg3_list(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_pfield_msg3_list(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, TrUserData);
d_pfield_msg3_list(<<0:1, X:7, Rest/binary>>, N, Acc, E,
		   F@_2, F@_3, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_msg3_list(PackedBytes, 0, 0, E),
    dfp_read_field_def_msg3(Rest2, 0, 0, NewSeq, F@_2, F@_3,
			    TrUserData).

d_packed_field_msg3_list(<<1:1, X:7, Rest/binary>>, N,
			 Acc, AccSeq)
    when N < 57 ->
    d_packed_field_msg3_list(Rest, N + 7, X bsl N + Acc,
			     AccSeq);
d_packed_field_msg3_list(<<0:1, X:7, Rest/binary>>, N,
			 Acc, AccSeq) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    d_packed_field_msg3_list(RestF, 0, 0,
			     [NewFValue | AccSeq]);
d_packed_field_msg3_list(<<>>, 0, 0, AccSeq) -> AccSeq.

d_field_msg3_int(<<1:1, X:7, Rest/binary>>, N, Acc,
		 F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_msg3_int(Rest, N + 7, X bsl N + Acc, F@_1, F@_2,
		     F@_3, TrUserData);
d_field_msg3_int(<<0:1, X:7, Rest/binary>>, N, Acc,
		 F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_msg3(RestF, 0, 0, F@_1, NewFValue,
			    F@_3, TrUserData).

d_field_msg3_opt(<<1:1, X:7, Rest/binary>>, N, Acc,
		 F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_msg3_opt(Rest, N + 7, X bsl N + Acc, F@_1, F@_2,
		     F@_3, TrUserData);
d_field_msg3_opt(<<0:1, X:7, Rest/binary>>, N, Acc,
		 F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_msg3(RestF, 0, 0, F@_1, F@_2,
			    NewFValue, TrUserData).

skip_varint_msg3(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_msg3(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		     TrUserData);
skip_varint_msg3(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_msg3(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData).

skip_length_delimited_msg3(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_msg3(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_msg3(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_msg3(Rest2, 0, 0, F@_1, F@_2, F@_3,
			    TrUserData).

skip_group_msg3(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_msg3(Rest, 0, Z2, F@_1, F@_2, F@_3,
			    TrUserData).

skip_32_msg3(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	     F@_3, TrUserData) ->
    dfp_read_field_def_msg3(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData).

skip_64_msg3(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	     F@_3, TrUserData) ->
    dfp_read_field_def_msg3(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #msg2{} -> merge_msg_msg2(Prev, New, TrUserData);
      #msg5{} -> merge_msg_msg5(Prev, New, TrUserData);
      #msg4{} -> merge_msg_msg4(Prev, New, TrUserData);
      #msg1{} -> merge_msg_msg1(Prev, New, TrUserData);
      #m_login_toc{} ->
	  merge_msg_m_login_toc(Prev, New, TrUserData);
      #m_login_tos{} ->
	  merge_msg_m_login_tos(Prev, New, TrUserData);
      #msg{} -> merge_msg_msg(Prev, New, TrUserData);
      #msg3{} -> merge_msg_msg3(Prev, New, TrUserData)
    end.

merge_msg_msg2(#msg2{list = PFlist, opt = PFopt},
	       #msg2{list = NFlist, int = NFint, opt = NFopt},
	       TrUserData) ->
    #msg2{list =
	      if PFlist /= undefined, NFlist /= undefined ->
		     'erlang_++'(PFlist, NFlist, TrUserData);
		 PFlist == undefined -> NFlist;
		 NFlist == undefined -> PFlist
	      end,
	  int = NFint,
	  opt =
	      if NFopt =:= undefined -> PFopt;
		 true -> NFopt
	      end}.

merge_msg_msg5(#msg5{list = PFlist, opt = PFopt},
	       #msg5{list = NFlist, int = NFint, opt = NFopt},
	       TrUserData) ->
    #msg5{list =
	      if PFlist /= undefined, NFlist /= undefined ->
		     'erlang_++'(PFlist, NFlist, TrUserData);
		 PFlist == undefined -> NFlist;
		 NFlist == undefined -> PFlist
	      end,
	  int = NFint,
	  opt =
	      if NFopt =:= undefined -> PFopt;
		 true -> NFopt
	      end}.

merge_msg_msg4(#msg4{list = PFlist, opt = PFopt},
	       #msg4{list = NFlist, int = NFint, opt = NFopt},
	       TrUserData) ->
    #msg4{list =
	      if PFlist /= undefined, NFlist /= undefined ->
		     'erlang_++'(PFlist, NFlist, TrUserData);
		 PFlist == undefined -> NFlist;
		 NFlist == undefined -> PFlist
	      end,
	  int = NFint,
	  opt =
	      if NFopt =:= undefined -> PFopt;
		 true -> NFopt
	      end}.

merge_msg_msg1(#msg1{list = PFlist, opt = PFopt},
	       #msg1{list = NFlist, int = NFint, opt = NFopt},
	       TrUserData) ->
    #msg1{list =
	      if PFlist /= undefined, NFlist /= undefined ->
		     'erlang_++'(PFlist, NFlist, TrUserData);
		 PFlist == undefined -> NFlist;
		 NFlist == undefined -> PFlist
	      end,
	  int = NFint,
	  opt =
	      if NFopt =:= undefined -> PFopt;
		 true -> NFopt
	      end}.

merge_msg_m_login_toc(#m_login_toc{},
		      #m_login_toc{id = NFid, name = NFname}, _) ->
    #m_login_toc{id = NFid, name = NFname}.

merge_msg_m_login_tos(#m_login_tos{},
		      #m_login_tos{id = NFid}, _) ->
    #m_login_tos{id = NFid}.

merge_msg_msg(#msg{list = PFlist, opt = PFopt},
	      #msg{list = NFlist, int = NFint, opt = NFopt},
	      TrUserData) ->
    #msg{list =
	     if PFlist /= undefined, NFlist /= undefined ->
		    'erlang_++'(PFlist, NFlist, TrUserData);
		PFlist == undefined -> NFlist;
		NFlist == undefined -> PFlist
	     end,
	 int = NFint,
	 opt =
	     if NFopt =:= undefined -> PFopt;
		true -> NFopt
	     end}.

merge_msg_msg3(#msg3{list = PFlist, opt = PFopt},
	       #msg3{list = NFlist, int = NFint, opt = NFopt},
	       TrUserData) ->
    #msg3{list =
	      if PFlist /= undefined, NFlist /= undefined ->
		     'erlang_++'(PFlist, NFlist, TrUserData);
		 PFlist == undefined -> NFlist;
		 NFlist == undefined -> PFlist
	      end,
	  int = NFint,
	  opt =
	      if NFopt =:= undefined -> PFopt;
		 true -> NFopt
	      end}.


verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #msg2{} -> v_msg_msg2(Msg, [msg2], TrUserData);
      #msg5{} -> v_msg_msg5(Msg, [msg5], TrUserData);
      #msg4{} -> v_msg_msg4(Msg, [msg4], TrUserData);
      #msg1{} -> v_msg_msg1(Msg, [msg1], TrUserData);
      #m_login_toc{} ->
	  v_msg_m_login_toc(Msg, [m_login_toc], TrUserData);
      #m_login_tos{} ->
	  v_msg_m_login_tos(Msg, [m_login_tos], TrUserData);
      #msg{} -> v_msg_msg(Msg, [msg], TrUserData);
      #msg3{} -> v_msg_msg3(Msg, [msg3], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


v_msg_msg2(#msg2{list = F1, int = F2, opt = F3}, Path,
	   _) ->
    if is_list(F1) ->
	   _ = [v_type_uint32(Elem, [list | Path]) || Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, uint32}, F1,
			 [list | Path])
    end,
    v_type_uint32(F2, [int | Path]),
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [opt | Path])
    end,
    ok.

v_msg_msg5(#msg5{list = F1, int = F2, opt = F3}, Path,
	   _) ->
    if is_list(F1) ->
	   _ = [v_type_uint32(Elem, [list | Path]) || Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, uint32}, F1,
			 [list | Path])
    end,
    v_type_uint32(F2, [int | Path]),
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [opt | Path])
    end,
    ok.

v_msg_msg4(#msg4{list = F1, int = F2, opt = F3}, Path,
	   _) ->
    if is_list(F1) ->
	   _ = [v_type_uint32(Elem, [list | Path]) || Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, uint32}, F1,
			 [list | Path])
    end,
    v_type_uint32(F2, [int | Path]),
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [opt | Path])
    end,
    ok.

v_msg_msg1(#msg1{list = F1, int = F2, opt = F3}, Path,
	   _) ->
    if is_list(F1) ->
	   _ = [v_type_uint32(Elem, [list | Path]) || Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, uint32}, F1,
			 [list | Path])
    end,
    v_type_uint32(F2, [int | Path]),
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [opt | Path])
    end,
    ok.

v_msg_m_login_toc(#m_login_toc{id = F1, name = F2},
		  Path, _) ->
    v_type_uint32(F1, [id | Path]),
    v_type_string(F2, [name | Path]),
    ok.

v_msg_m_login_tos(#m_login_tos{id = F1}, Path, _) ->
    v_type_uint32(F1, [id | Path]), ok.

v_msg_msg(#msg{list = F1, int = F2, opt = F3}, Path,
	  _) ->
    if is_list(F1) ->
	   _ = [v_type_uint32(Elem, [list | Path]) || Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, uint32}, F1,
			 [list | Path])
    end,
    v_type_uint32(F2, [int | Path]),
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [opt | Path])
    end,
    ok.

v_msg_msg3(#msg3{list = F1, int = F2, opt = F3}, Path,
	   _) ->
    if is_list(F1) ->
	   _ = [v_type_uint32(Elem, [list | Path]) || Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, uint32}, F1,
			 [list | Path])
    end,
    v_type_uint32(F2, [int | Path]),
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [opt | Path])
    end,
    ok.

v_type_uint32(N, _Path) when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).


-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{msg, msg2},
      [#field{name = list, fnum = 1, rnum = 2, type = uint32,
	      occurrence = repeated, opts = []},
       #field{name = int, fnum = 2, rnum = 3, type = uint32,
	      occurrence = required, opts = []},
       #field{name = opt, fnum = 3, rnum = 4, type = uint32,
	      occurrence = optional, opts = []}]},
     {{msg, msg5},
      [#field{name = list, fnum = 1, rnum = 2, type = uint32,
	      occurrence = repeated, opts = []},
       #field{name = int, fnum = 2, rnum = 3, type = uint32,
	      occurrence = required, opts = []},
       #field{name = opt, fnum = 3, rnum = 4, type = uint32,
	      occurrence = optional, opts = []}]},
     {{msg, msg4},
      [#field{name = list, fnum = 1, rnum = 2, type = uint32,
	      occurrence = repeated, opts = []},
       #field{name = int, fnum = 2, rnum = 3, type = uint32,
	      occurrence = required, opts = []},
       #field{name = opt, fnum = 3, rnum = 4, type = uint32,
	      occurrence = optional, opts = []}]},
     {{msg, msg1},
      [#field{name = list, fnum = 1, rnum = 2, type = uint32,
	      occurrence = repeated, opts = []},
       #field{name = int, fnum = 2, rnum = 3, type = uint32,
	      occurrence = required, opts = []},
       #field{name = opt, fnum = 3, rnum = 4, type = uint32,
	      occurrence = optional, opts = []}]},
     {{msg, m_login_toc},
      [#field{name = id, fnum = 1, rnum = 2, type = uint32,
	      occurrence = required, opts = []},
       #field{name = name, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []}]},
     {{msg, m_login_tos},
      [#field{name = id, fnum = 1, rnum = 2, type = uint32,
	      occurrence = required, opts = []}]},
     {{msg, msg},
      [#field{name = list, fnum = 1, rnum = 2, type = uint32,
	      occurrence = repeated, opts = []},
       #field{name = int, fnum = 2, rnum = 3, type = uint32,
	      occurrence = required, opts = []},
       #field{name = opt, fnum = 3, rnum = 4, type = uint32,
	      occurrence = optional, opts = []}]},
     {{msg, msg3},
      [#field{name = list, fnum = 1, rnum = 2, type = uint32,
	      occurrence = repeated, opts = []},
       #field{name = int, fnum = 2, rnum = 3, type = uint32,
	      occurrence = required, opts = []},
       #field{name = opt, fnum = 3, rnum = 4, type = uint32,
	      occurrence = optional, opts = []}]}].


get_msg_names() ->
    [msg2, msg5, msg4, msg1, m_login_toc, m_login_tos, msg,
     msg3].


get_group_names() -> [].


get_msg_or_group_names() ->
    [msg2, msg5, msg4, msg1, m_login_toc, m_login_tos, msg,
     msg3].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def(msg2) ->
    [#field{name = list, fnum = 1, rnum = 2, type = uint32,
	    occurrence = repeated, opts = []},
     #field{name = int, fnum = 2, rnum = 3, type = uint32,
	    occurrence = required, opts = []},
     #field{name = opt, fnum = 3, rnum = 4, type = uint32,
	    occurrence = optional, opts = []}];
find_msg_def(msg5) ->
    [#field{name = list, fnum = 1, rnum = 2, type = uint32,
	    occurrence = repeated, opts = []},
     #field{name = int, fnum = 2, rnum = 3, type = uint32,
	    occurrence = required, opts = []},
     #field{name = opt, fnum = 3, rnum = 4, type = uint32,
	    occurrence = optional, opts = []}];
find_msg_def(msg4) ->
    [#field{name = list, fnum = 1, rnum = 2, type = uint32,
	    occurrence = repeated, opts = []},
     #field{name = int, fnum = 2, rnum = 3, type = uint32,
	    occurrence = required, opts = []},
     #field{name = opt, fnum = 3, rnum = 4, type = uint32,
	    occurrence = optional, opts = []}];
find_msg_def(msg1) ->
    [#field{name = list, fnum = 1, rnum = 2, type = uint32,
	    occurrence = repeated, opts = []},
     #field{name = int, fnum = 2, rnum = 3, type = uint32,
	    occurrence = required, opts = []},
     #field{name = opt, fnum = 3, rnum = 4, type = uint32,
	    occurrence = optional, opts = []}];
find_msg_def(m_login_toc) ->
    [#field{name = id, fnum = 1, rnum = 2, type = uint32,
	    occurrence = required, opts = []},
     #field{name = name, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []}];
find_msg_def(m_login_tos) ->
    [#field{name = id, fnum = 1, rnum = 2, type = uint32,
	    occurrence = required, opts = []}];
find_msg_def(msg) ->
    [#field{name = list, fnum = 1, rnum = 2, type = uint32,
	    occurrence = repeated, opts = []},
     #field{name = int, fnum = 2, rnum = 3, type = uint32,
	    occurrence = required, opts = []},
     #field{name = opt, fnum = 3, rnum = 4, type = uint32,
	    occurrence = optional, opts = []}];
find_msg_def(msg3) ->
    [#field{name = list, fnum = 1, rnum = 2, type = uint32,
	    occurrence = repeated, opts = []},
     #field{name = int, fnum = 2, rnum = 3, type = uint32,
	    occurrence = required, opts = []},
     #field{name = opt, fnum = 3, rnum = 4, type = uint32,
	    occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
    "4.1.1".

gpb_version_as_list() ->
    [4,1,1].
